---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
  name: dkube-prometheus-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dkube-prometheus-clusterrole
subjects:
- kind: ServiceAccount
  name: dkube-prometheus
  namespace: dkube

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dkube-prometheus-clusterrole
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - services
  - endpoints
  - pods
  - nodes/proxy
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- nonResourceURLs:
  - /metrics
  verbs:
  - get
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dkube-prometheus
  namespace: dkube

---
apiVersion: v1
data:
  prometheus.rules: |-
    groups:
    - name: dkube alert
      rules:
      - alert: High Pod Memory
        expr: sum(container_memory_usage_bytes) > 1
        for: 1m
        labels:
          severity: slack
        annotations:
          summary: High Memory Usage
  prometheus.yml: |-
    global:
      scrape_interval: 30s
      evaluation_interval: 30s
    rule_files:
      - /etc/prometheus/prometheus.rules
      - /prometheus/rules/*.yml
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - dkube-alertmanager.dkube
    scrape_configs:
    - job_name: 'kubernetes-cadvisor'
 
      scheme: https
 
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
 
      kubernetes_sd_configs:
      - role: node
 
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

    # scrape config for service endpoints.
    - job_name: 'dkube-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_dkube_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
    - job_name: kfserving-monitoring
      honor_timestamps: true
      scrape_interval: 120s
      scrape_timeout: 10s
      metrics_path: /metrics
      scheme: http
      follow_redirects: true
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_networking_internal_knative_dev_serviceType]
        separator: ;
        regex: Private
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        separator: ;
        regex: http-usermetric
        replacement: $1
        action: keep
      - source_labels: [__meta_kubernetes_namespace]
        separator: ;
        regex: (.*)
        target_label: namespace
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_pod_name]
        separator: ;
        regex: (.*)
        target_label: pod
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_pod_container_name]
        separator: ;
        regex: (.*)
        target_label: container
        replacement: $1
        action: replace
      - source_labels: [__meta_kubernetes_pod_label_jobname]
        separator: ;
        regex: (.*)
        target_label: deployment
        replacement: ${1}
        action: replace
      - source_labels: [__meta_kubernetes_pod_label_component]
        separator: ;
        regex: (.*)
        target_label: component
        replacement: ${1}
        action: replace
      kubernetes_sd_configs:
      - role: endpoints
        kubeconfig_file: ""
        follow_redirects: true

kind: ConfigMap
metadata:
  name: dkube-prometheus-config
  namespace: dkube

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9111"
    prometheus.io/dkube_scrape: "true"
  labels:
    app: dkube-node-exporter
  name: dkube-node-exporter
  namespace: dkube
spec:
  ports:
  - name: metrics
    port: 9111
    protocol: TCP
    targetPort: metrics
  selector:
    app: dkube-node-exporter
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: dkube-node-exporter
  name: dkube-node-exporter
  namespace: dkube
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: dkube-node-exporter
  template:
    metadata:
      labels:
        app: dkube-node-exporter
    spec:
      tolerations:
        - operator: "Exists"
      containers:
      - args:
        - --web.listen-address=0.0.0.0:9111
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        image: quay.io/prometheus/node-exporter:v0.15.2
        imagePullPolicy: IfNotPresent
        name: node-exporter
        ports:
        - containerPort: 9111
          hostPort: 9111
          name: metrics
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 30Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /host/proc
          name: proc
          readOnly: true
        - mountPath: /host/sys
          name: sys
          readOnly: true
      dnsPolicy: ClusterFirst
      hostNetwork: true
      hostPID: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: dkube-prometheus
      serviceAccountName: dkube-prometheus
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - hostPath:
          path: /proc
          type: ""
        name: proc
      - hostPath:
          path: /sys
          type: ""
        name: sys
  # templateGeneration: 1
  updateStrategy:
    type: OnDelete

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: dkube-state-exporter
  name: dkube-state-exporter
  namespace: dkube
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - extensions
  resourceNames:
  - dkube-state-exporter
  resources:
  - deployments
  verbs:
  - get
  - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: dkube-state-exporter
  name: dkube-state-exporter
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - endpoints
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - list
  - watch

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dkube-state-exporter
  name: dkube-state-exporter
  namespace: dkube

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: dkube-state-exporter
  name: dkube-state-exporter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dkube-state-exporter
subjects:
- kind: ServiceAccount
  name: dkube-state-exporter
  namespace: dkube

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: dkube-state-exporter
  name: dkube-state-exporter
  namespace: dkube
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dkube-state-exporter
subjects:
- kind: ServiceAccount
  name: dkube-state-exporter

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/dkube_scrape: "true"
  labels:
    app: dkube-state-exporter
  name: dkube-state-exporter
  namespace: dkube
spec:
  ports:
  - name: dkube-state-metrics
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: dkube-exporter-deploy
  sessionAffinity: None
  type: ClusterIP
---
# This service enables/disables deployment metrics polling, export metrics
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8000"
    prometheus.io/dkube_scrape: "true"
  labels:
    app: deployments-exporter
  name: deployments-exporter
  namespace: dkube
spec:
  ports:
  - name: deployment-metrics
    port: 80
    protocol: TCP
    targetPort: 8000
  selector:
    app: dkube-exporter-deploy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    ksonnet.io/component: monitoring
  name: dkube-prometheus-pvc
  namespace: dkube
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: ""
  volumeName: dkube-prometheus-pv

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/dkube_scrape: "true"
    prometheus.io/port: '9090'
  labels:
    app: dkube-prometheus
  name: dkube-prometheus
  namespace: dkube
spec:
  ports:
  - name: http-prometheus
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: dkube-prometheus
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dkube-alertmanager
  name: dkube-alertmanager
  namespace: dkube
spec:
  ports:
  - name: http-alertmanager
    port: 80
    protocol: TCP
    targetPort: 9093
  selector:
    app: dkube-prometheus
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dkube-prometheus
  name: dkube-prometheus
  namespace: dkube
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: dkube-prometheus
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: dkube-prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.28.1
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
            - "--storage.tsdb.retention.time=3650d"
            - "--web.enable-admin-api"
            - "--web.enable-lifecycle"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
        - name: alertmanager
          image: prom/alertmanager:v0.23.0
          args:
            - "--config.file=/prometheus/alertmanager/alertmanager.yml"
          ports:
            - containerPort: 9093
          volumeMounts:
            - name: prometheus-storage-volume
              mountPath: /prometheus/

      serviceAccount: dkube-prometheus
      serviceAccountName: dkube-prometheus
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: dkube-prometheus-config
  
        - name: prometheus-storage-volume
          persistentVolumeClaim:
            claimName: dkube-prometheus-pvc
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   annotations:
#     prometheus.io/port: "8080"
#     prometheus.io/dkube_scrape: "true"
#   labels:
#     app: dkube-pod-exporter
#     ksonnet.io/component: monitoring
#   name: dkube-cpu-exporter-service
#   namespace: dkube
# spec:
#   ports:
#   - name: http-metrics
#     port: 8080
#     protocol: TCP
#     targetPort: 8080
#   selector:
#     app: pod-exporter
#   sessionAffinity: None
#   type: ClusterIP
# ---
# apiVersion: apps/v1
# kind: DaemonSet
# metadata:
#   labels:
#     ksonnet.io/component: monitoring
#   name: dkube-cpu-exporter
#   namespace: dkube
# spec:
#   selector:
#     matchLabels:
#       app: pod-exporter
#   template:
#     metadata:
#       labels:
#         app: pod-exporter
#     spec:
#       tolerations:
#         - operator: "Exists"
#       containers:
#       - image: google/cadvisor:latest
#         imagePullPolicy: IfNotPresent
#         name: cadvisor
#         ports:
#         - containerPort: 8080
#           name: http-metrics
#           protocol: TCP
#         volumeMounts: cadvVolumeMounts
#       dnsConfig:
#         options:
#         - name: single-request-reopen
#         - name: timeout
#           value: "30"
#       volumes: cadvVolumes
