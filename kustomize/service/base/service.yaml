---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    ksonnet.io/component: service
  name: dex
rules:
- apiGroups:
  - dex.coreos.com
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    ksonnet.io/component: service
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dkube
  namespace: dkube
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dkubeClusterRole
subjects:
- kind: ServiceAccount
  name: dkube
  namespace: dkube
---
apiVersion: v1
data:
  config.yaml: |
    issuer: http://127.0.0.1:5556/dex
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      http: 0.0.0.0:5556
    telemetry:
      http: 0.0.0.0:5558
    expiry:
      idTokens: "72h"
    staticClients:
    - id: dkube-app
      redirectURIs:
      - 'http://127.0.0.1:3001/cb'
      name: 'Dkube App'
      secret: ZXhhbXBsZS1hcHAtc2VjcmV0
    connectors:
    - type: dkube
      id: dkube
      name: Dkube
      config:
        username: fake
        password: fakeAgain
    enablePasswordDB: true
    staticPasswords:
    - email: "admin@example.com"
      # bcrypt hash of the string "password"
      hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
kind: ConfigMap
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-auth-config
  namespace: dkube
---
apiVersion: v1
data:
  fluent.conf: |
    <source>
     @type tail
     path /var/log/containers/*.log
     pos_file /var/log/fluentd-containers-jobs.log.pos
     time_key time
     time_format %Y-%m-%dT%H:%M:%S
     refresh_interval 1s
     open_on_every_update true
     enable_stat_watcher false
     rotate_wait 2
     tag kubernetes_jobs.*
     @label @JOBS
     format json
     read_from_head true
    </source>

    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers-pl.log.pos
      time_key time
      time_format %Y-%m-%dT%H:%M:%S
      refresh_interval 1s
      open_on_every_update true
      enable_stat_watcher false
      rotate_wait 2
      tag kubernetes_pl.*
      @label @PIPELINE
      format json
      read_from_head true
    </source>

    <label @JOBS>
         <filter kubernetes_jobs.**>
            @type kubernetes_metadata
        </filter>

        <filter kubernetes_jobs.**>
            @type grep
            <regexp>
                key $.kubernetes.labels.logger
                pattern /^dkube$/
            </regexp>
        </filter>

        <filter kubernetes_jobs.**>
           @type record_modifier
           enable_ruby
           <record>
               jobname ${record.dig("kubernetes", "labels", "jobname")}
               username ${record.dig("kubernetes", "labels", "username")}
               container ${record.dig("kubernetes", "container_name")}
               message ${record.dig("kubernetes", "labels", "tf-replica-type")}-${record.dig("kubernetes", "labels", "tf-replica-index")}:  ${record.dig("log")}
           </record>
           remove_keys log, stream, docker, kubernetes
        </filter>

        <match kubernetes_jobs.**>
          @type s3
          aws_key_id dkube
          aws_sec_key l06dands19s
          s3_endpoint http://dkube-minio-server.dkube:9000/
          s3_bucket dkube
          path system/logs/${username}/${jobname}/${container}
          s3_object_key_format %{path}/job-log-%{index}.%{file_extension}
          store_as text
          force_path_style true
          <format>
            @type single_value
            message_key message
            add_newline false
          </format>
          <buffer username, jobname, container>
            @type file
            path /var/log/td-agent/jobs/${username}/${jobname}/${container}
            timekey 10s            # Flush the accumulated chunks every hour
            timekey_wait 10s        # Wait for 60 seconds before flushing
            timekey_use_utc true   # Use this option if you prefer UTC timestamps
            chunk_limit_size 256m  # The maximum size of each chunk
            flush_thread_count 8
            retry_forever true
            #retry_max_times 100
            overflow_action throw_exception
            retry_type exponential_backoff
            retry_exponential_backoff_base 2
            flush_mode immediate
            flush_at_shutdown true
            queue_limit_length 10000
          </buffer>
        </match>
    </label>


    <label @PIPELINE>
         <filter kubernetes_pl.**>
            @type kubernetes_metadata
        </filter>

        <filter kubernetes_pl.**>
            @type grep
            <regexp>
                key $.kubernetes.labels.logger
                pattern /^dkubepl$/
            </regexp>
        </filter>

         <filter kubernetes_pl.**>
           @type record_modifier
           enable_ruby
           <record>
               podname ${record.dig("kubernetes", "labels", "runid")}
               wfname ${record.dig("kubernetes", "labels", "workflows_argoproj_io/workflow")}
               container ${record.dig("kubernetes", "container_name")}
           </record>
           remove_keys  stream, docker, kubernetes
        </filter>

        <match kubernetes_pl.**>
          @type s3
          aws_key_id dkube
          aws_sec_key l06dands19s
          s3_endpoint http://dkube-minio-server.dkube:9000/
          s3_bucket dkube
          path system/logs/kubeflow/${wfname}/${podname}/${container}
          s3_object_key_format %{path}/pl-log-%{index}.%{file_extension}
          store_as text
          force_path_style true
          <format>
            @type single_value
            message_key log
            add_newline false
          </format>
          <buffer wfname, podname, container>
            @type file
            path /var/log/td-agent/pljobs/${wfname}/${podname}/${container}
            timekey 10s            # Flush the accumulated chunks every hour
            timekey_wait 10s        # Wait for 60 seconds before flushing
            timekey_use_utc true   # Use this option if you prefer UTC timestamps
            chunk_limit_size 256m  # The maximum size of each chunk
            flush_thread_count 8
            retry_forever true
            overflow_action throw_exception
            retry_type exponential_backoff
            retry_exponential_backoff_base 2
            retry_wait 5s
            flush_mode immediate
            flush_at_shutdown true
            queue_limit_length 10000
          </buffer>
        </match>
    </label>
kind: ConfigMap
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-log-collector
  namespace: dkube
---
apiVersion: v1
data:
  accuracy.conf: "<filter kubernetes_accuracy.**>\n    @type kubernetes_metadata\n</filter>\n\n<filter
    kubernetes_accuracy.**>\n    @type grep\n    <regexp>\n        key $.kubernetes.labels.logger\n
    \       pattern /^dkube$/\n    </regexp>\n</filter>\n\n<filter kubernetes_accuracy.**>\n
    \   @type grep\n    <regexp>\n        key log\n        pattern /accuracy/\n    </regexp>\n</filter>\n\n<filter
    kubernetes_accuracy.**>\n  @type parser\n  key_name $.log\n  reserve_data true\n
    \ remove_key_name_field true\n  suppress_parse_error_log true\n  <parse>\n    @type
    regexp\n    expression /^(.*):(.*):((.*)])?((.*):)?(?<message>(.*))$/\n  </parse>\n</filter>\n\n
    <filter kubernetes_accuracy.**>\n   @type record_modifier\n   enable_ruby\n   <record>\n
    \      escaped_tag ${record[\"message\"].gsub(' ', '')}\n   </record>\n </filter>\n\n<filter
    kubernetes_accuracy.**>\n    @type grep\n    <regexp>\n        key escaped_tag\n
    \       pattern /accuracy=/\n    </regexp>\n</filter>\n\n<filter kubernetes_accuracy.**>\n
    \ @type parser\n  key_name $.escaped_tag\n  reserve_data true\n  remove_key_name_field
    true\n  suppress_parse_error_log true\n  <parse>\n    @type ltsv\n    delimiter_pattern
    /,/\n    label_delimiter  =\n  </parse>\n</filter>\n\n<filter kubernetes_accuracy.**>\n
    \  @type record_modifier\n   enable_ruby\n   <record>\n       jobname ${record.dig(\"kubernetes\",
    \"labels\", \"jobname\")}\n       username ${record.dig(\"kubernetes\", \"labels\",
    \"username\")}\n       jobid ${record.dig(\"kubernetes\", \"labels\", \"jobid\")}\n
    \      mode ${record.dig(\"mode\").to_s}\n       step ${record.dig(\"step\").to_i}\n
    \      epoch ${record.dig(\"epoch\").to_i}\n       accuracy ${record.dig(\"accuracy\").to_f}
    \n   </record>\n</filter>\n\n<filter kubernetes_accuracy.**>\n  @type prometheus\n
    \ <metric>\n    name accuracy\n    type gauge\n    desc accuracy metric\n    key
    $.accuracy\n    <labels>\n      jobname ${jobname}\n      username ${username}\n
    \     jobid ${jobid}\n      step ${step}\n      mode ${mode}\n      epoch ${epoch}\n
    \   </labels>\n  </metric>\n</filter>\n\n<match kubernetes_accuracy.**>\n    @type
    relabel\n    @label @PROMETHEUS\n</match>\n"
  fluent.conf: |
    <source>
      @type prometheus
    </source>

    <source>
      @type monitor_agent
    </source>

    <source>
      @type forward
    </source>

    # input plugin that collects metrics from MonitorAgent
    <source>
      @type prometheus_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for output plugin
    <source>
      @type prometheus_output_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for in_tail plugin
    <source>
      @type prometheus_tail_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    <source>
      @type tail
      path /var/log/containers/*_tensorflow-*.log
      pos_file /var/log/fluentd-containers-accuracy.log.pos
      time_format %Y-%m-%dT%H:%M:%S
      tag kubernetes_accuracy.*
      @label @ACCURACY
      format json
      read_from_head true
    </source>

    <source>
      @type tail
      path /var/log/containers/*_tensorflow-*.log
      pos_file /var/log/fluentd-containers-loss.log.pos
      time_format %Y-%m-%dT%H:%M:%S
      tag kubernetes_loss.*
      @label @LOSS
      format json
      read_from_head true
    </source>

    <source>
      @type tail
      path /var/log/containers/*_tensorflow-*.log
      pos_file /var/log/fluentd-containers-step.log.pos
      time_format %Y-%m-%dT%H:%M:%S
      tag kubernetes_step.*
      @label @STEP
      format json
      read_from_head true
    </source>

    <label @STEP>
        @include step.conf
    </label>

    <label @ACCURACY>
        @include accuracy.conf
    </label>

    <label @LOSS>
        @include loss.conf
    </label>

    <label @PROMETHEUS>
        @include prometheus.conf
    </label>
  loss.conf: "<filter kubernetes_loss.**>\n     @type kubernetes_metadata\n </filter>\n\n
    <filter kubernetes_loss.**>\n     @type grep\n     <regexp>\n         key $.kubernetes.labels.logger\n
    \        pattern /^dkube$/\n     </regexp>\n </filter>\n\n <filter kubernetes_loss.**>\n
    \    @type grep\n     <regexp>\n         key log\n         pattern /loss/\n     </regexp>\n
    </filter>\n\n <filter kubernetes_loss.**>\n   @type parser\n   key_name $.log\n
    \  reserve_data true\n   remove_key_name_field true\n   suppress_parse_error_log
    true\n   <parse>\n     @type regexp\n     expression /^(.*):(.*):((.*)])?((.*):)?(?<message>(.*))$/\n
    \  </parse>\n </filter>\n\n  <filter kubernetes_loss.**>\n    @type record_modifier\n
    \   enable_ruby\n    <record>\n        escaped_tag ${record[\"message\"].gsub('
    ', '')}\n    </record>\n  </filter>\n\n <filter kubernetes_loss.**>\n     @type
    grep\n     <regexp>\n         key escaped_tag\n         pattern /loss=/\n     </regexp>\n
    </filter>\n\n <filter kubernetes_loss.**>\n   @type parser\n   key_name $.escaped_tag\n
    \  reserve_data true\n   remove_key_name_field true\n   suppress_parse_error_log
    true\n   <parse>\n     @type ltsv\n     delimiter_pattern /,/\n     label_delimiter
    \ =\n   </parse>\n </filter>\n\n <filter kubernetes_loss.**>\n    @type record_modifier\n
    \   enable_ruby\n    <record>\n        jobname ${record.dig(\"kubernetes\", \"labels\",
    \"jobname\")}\n        username ${record.dig(\"kubernetes\", \"labels\", \"username\")}\n
    \       jobuuid ${record.dig(\"kubernetes\", \"labels\", \"jobuuid\")}\n        jobid
    ${record.dig(\"kubernetes\", \"labels\", \"jobid\")}\n        step ${record.dig(\"step\").to_i}\n
    \       loss ${record.dig(\"loss\").to_f}\n        mode ${record.dig(\"mode\").to_s}\n
    \       epoch ${record.dig(\"epoch\").to_i} \n    </record>\n </filter>\n\n <filter
    kubernetes_loss.**>\n   @type prometheus\n   <metric>\n     name loss\n     type
    gauge\n     desc loss metric\n     key $.loss\n     <labels>\n       jobuuid ${jobuuid}\n
    \      jobname ${jobname}\n       username ${username}\n       jobid ${jobid}\n
    \      step ${step}\n       mode ${mode}\n       epoch ${epoch}\n     </labels>\n
    \  </metric>\n </filter>\n\n <match kubernetes_loss.**>\n     @type relabel\n
    \    @label @PROMETHEUS\n </match>\n"
  prometheus.conf: |
    <match {kubernetes_accuracy.**, kubernetes_loss.**, kubernetes_step.**}>
      @type copy
      # for MonitorAgent sample
      <store>
        @id test_forward
        @type forward
        buffer_type memory
        flush_interval 1s
        max_retry_wait 2s
        send_timeout 60s
        recover_wait 60s
        hard_timeout 60s
        <buffer>
          # max_retry_wait 10s
          flush_interval 1s
          # retry_type periodic
          disable_retry_limit
       </buffer>
       # retry_limit 3
       disable_retry_limit
       <server>
         host 0.0.0.0
         port 24224
       </server>
      </store>
    </match>
  step.conf: |
    <filter kubernetes_step.**>
        @type kubernetes_metadata
    </filter>

    <filter kubernetes_step.**>
        @type grep
        <regexp>
            key $.kubernetes.labels.logger
            pattern /^dkube$/
        </regexp>
    </filter>

    <filter kubernetes_step.**>
        @type grep
        <regexp>
            key log
            pattern /step/
        </regexp>
    </filter>

    <filter kubernetes_step.**>
      @type parser
      key_name $.log
      reserve_data true
      remove_key_name_field true
      suppress_parse_error_log true
      <parse>
        @type regexp
        expression /^(.*):(.*):((.*)])?((.*):)?(?<message>(.*))$/
      </parse>
    </filter>

     <filter kubernetes_step.**>
       @type record_modifier
       enable_ruby
       <record>
           escaped_tag ${record["message"].gsub(' ', '')}
       </record>
     </filter>

    <filter kubernetes_step.**>
        @type grep
        <regexp>
            key escaped_tag
            pattern /,step=/
        </regexp>
    </filter>

    <filter kubernetes_step.**>
      @type parser
      key_name $.escaped_tag
      reserve_data true
      remove_key_name_field true
      suppress_parse_error_log true
      <parse>
        @type ltsv
        delimiter_pattern /,/
        label_delimiter  =
      </parse>
    </filter>

    <filter kubernetes_step.**>
       @type record_modifier
       enable_ruby
       <record>
           jobname ${record.dig("kubernetes", "labels", "jobname")}
           username ${record.dig("kubernetes", "labels", "username")}
           jobid ${record.dig("kubernetes", "labels", "jobid")}
           step ${record.dig("step").to_i}
           accuracy ${record.dig("accuracy").to_f}
           loss ${record.dig("loss").to_f}
           mode ${record.dig("mode").to_s}
       </record>
    </filter>

    <filter kubernetes_step.**>
      @type prometheus
      <metric>
        name step
        type gauge
        desc step metric
        key $.step
        <labels>
          jobname ${jobname}
          username ${username}
          jobid ${jobid}
          accuracy ${accuracy}
          loss ${loss}
          mode ${mode}
        </labels>
      </metric>
    </filter>

    <match kubernetes_step.**>
        @type relabel
        @label @PROMETHEUS
    </match>
kind: ConfigMap
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-metric-collector
  namespace: dkube
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-db-pvc
  namespace: dkube
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: ""
  volumeName: dkube-db-pv
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube
  namespace: dkube
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-proxy
  namespace: dkube
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-proxy
  namespace: dkube
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    ksonnet.io/component: service
  name: dkube-proxy
  namespace: dkube
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dkube-proxy
subjects:
- kind: ServiceAccount
  name: dkube-proxy
  namespace: dkube
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  d3auth-login
      prefix: /dkube/v2/login
      rewrite: /login
      timeout_ms: 600000
      service: dkube-auth-server:3001
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  d3auth-logout
      prefix: /dkube/v2/logout
      rewrite: /logout
      timeout_ms: 600000
      service: dkube-auth-server:3001
  labels:
    app: d3auth
    ksonnet.io/component: service
  name: dkube-auth-server
  namespace: dkube
spec:
  ports:
  - name: dex-s
    port: 5556
    protocol: TCP
    targetPort: 5556
  - name: authn
    port: 3001
    protocol: TCP
    targetPort: 3001
  selector:
    app: dkube-auth
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dkube-controller-master
    ksonnet.io/component: service
  name: dkube-controller-headless-master
  namespace: dkube
spec:
  clusterIP: None
  ports:
  - name: dkube-d3api
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: dkube-controller-master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_d3api
      prefix: /dkube/v2
      rewrite: /dkube/v2
      method_regex: true
      method: 'POST|PUT|DELETE|OPTIONS'
      timeout_ms: 600000
      service: dkube-controller-master:5000
  labels:
    app: dkube-controller-master
    ksonnet.io/component: service
  name: dkube-controller-master
  namespace: dkube
spec:
  ports:
  - name: dkube-d3api
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: dkube-controller-master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_d3api_worker
      prefix: /dkube/v2
      rewrite: /dkube/v2
      method: GET
      timeout_ms: 600000
      service: dkube-controller-worker:5000
  labels:
    app: dkube-controller-worker
    ksonnet.io/component: service
  name: dkube-controller-worker
  namespace: dkube
spec:
  ports:
  - port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: dkube-controller-worker
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_etcd
      prefix: /dkube/v2/etcd/
      rewrite: /
      timeout_ms: 600000
      service: dkube-db-server:2379
  labels:
    ksonnet.io/component: service
  name: dkube-db-server
  namespace: dkube
spec:
  ports:
  - port: 2379
    protocol: TCP
    targetPort: 2379
  selector:
    app: dkube-db-server
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_docs
      prefix: /docs
      rewrite: /docs
      timeout_ms: 600000
      service: dkube-docs:8888
      cors:
       origins: "*"
       methods: "*"
       headers: "*"
  labels:
    ksonnet.io/component: service
  name: dkube-docs
  namespace: dkube
spec:
  ports:
  - name: serve
    port: 8888
    protocol: TCP
    targetPort: 80
  selector:
    app: dkube-tools
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_downloader
      use_websocket: true
      prefix: /dkube/v2/ext
      rewrite: /dkube/v2
      timeout_ms: 0
      service: dkube-downloader:9401
      cors:
       origins: "*"
       methods: "*"
       headers: "*"
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkubepljobs
      prefix: /dkube/pipeline/logs/
      rewrite: /dkube/v2/kubeflow/
      timeout_ms: 600000
      service: dkube-downloader:9401
      cors:
       origins: "*"
       methods: "*"
       headers: "*"
  labels:
    ksonnet.io/component: service
  name: dkube-downloader
  namespace: dkube
spec:
  ports:
  - port: 9401
    protocol: TCP
    targetPort: 9401
  selector:
    app: dkube-controller-worker
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9401"
    prometheus.io/scrape: "true"
  labels:
    app: dkube-gpu-exporter
    ksonnet.io/component: service
  name: dkube-exporter
  namespace: dkube
spec:
  ports:
  - name: http-metrics
    port: 9401
    protocol: TCP
    targetPort: 9401
  selector:
    app: dkube-ext
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "24231"
    prometheus.io/scrape: "true"
  labels:
    app: dkube-log-processor
    ksonnet.io/component: service
  name: dkube-log-processor
  namespace: dkube
spec:
  ports:
  - name: dkube-log-metrics
    port: 24231
    protocol: TCP
    targetPort: 24231
  selector:
    k8s-app: dkube-metric-collector
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dfabproxy
      use_websocket: true
      timeout_ms: 600000
      prefix: /dkube/v2/operator
      rewrite: /dkube/v2/operator
      service: dkube-operator-api-proxy:8000
  labels:
    ksonnet.io/component: service
  name: dkube-operator-api-proxy
  namespace: dkube
spec:
  ports:
  - name: dfabproxy
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: dkube-operator-proxy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_monitoring
      prefix: /dkube/grafana/
      rewrite: /
      service: dkube-grafana.dkube:80
      timeout_ms: 600000
      use_websocket: true
  labels:
    app: dkube-prometheus-grafana
    ksonnet.io/component: service
  name: dkube-prometheus-grafana-proxy
  namespace: dkube
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: dkube-prometheus-grafana
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  "prometheus"
      timeout_ms: 600000
      use_websocket: true
      prefix: "/dkube/v2/prometheus/api/v1"
      rewrite: "/api/v1"
      service: "kube-prometheus.dkube:9090"
      cors:
       origins: "*"
       methods: "*"
       headers: "*"
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  "prometheus-alert-manager"
      timeout_ms: 600000
      use_websocket: true
      prefix: "/dkube/v2/prometheus/alertmanager/api/v1"
      rewrite: "/api/v1"
      service: "kube-prometheus-alertmanager.dkube:9093"
      cors:
       origins: "*"
       methods: "*"
       headers: "*"
  labels:
    ksonnet.io/component: service
  name: dkube-prometheus-mapping-service
  namespace: dkube
spec:
  clusterIP: None
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v0
      kind: Module
      name: tls
      config:
        server:
          enabled: True
          secret: dkube-certificate-secret
          alpn_protocols: h2
      ---
      apiVersion: ambassador/v1
      kind:  AuthService
      name:  d3-auth
      auth_service: dkube-auth-server:3001
      allowed_request_headers:
      - "mode"
      - "d3-license"
      allowed_authorization_headers:
      - "d3-uname"
      - "d3-role"
  labels:
    ksonnet.io/component: service
    service: dkube-proxy
  name: dkube-proxy
  namespace: dkube
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: ambassador
    nodePort: 32222
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    service: dkube-proxy
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    ksonnet.io/component: service
    service: dkube-proxy-admin
  name: dkube-proxy-admin
  namespace: dkube
spec:
  ports:
  - name: ambassador-admin
    port: 8877
    targetPort: 8877
  selector:
    service: dkube-proxy
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_webapp
      prefix: /inference
      rewrite: /inference
      timeout_ms: 600000
      service: dkube-serving:8000
      cors:
       origins: "*"
       methods: "*"
       headers: "*"
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_webapp_predict
      prefix: /predict
      rewrite: /predict
      timeout_ms: 600000
      service: dkube-serving:8000
      cors:
       origins: "*"
       methods: "*"
       headers: "*"
  labels:
    ksonnet.io/component: service
  name: dkube-serving
  namespace: dkube
spec:
  ports:
  - name: serve
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: dkube-tools
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9401"
    prometheus.io/scrape: "true"
  labels:
    app: dkube-storage-exporter
    ksonnet.io/component: service
  name: dkube-storage-exporter
  namespace: dkube
spec:
  ports:
  - name: http-metrics
    port: 9401
    protocol: TCP
    targetPort: 9401
  selector:
    app: dkube-storage-exporter
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  dkube_ui
      prefix: /
      rewrite: /
      service: dkube-ui:3000
      timeout_ms: 60000
  labels:
    ksonnet.io/component: service
    service: dkube-ui
  name: dkube-ui
  namespace: dkube
spec:
  ports:
  - name: ui
    port: 3000
    targetPort: 3000
  selector:
    app: dkube-ui
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: argoui-mapping
      prefix: "/argo/logs/"
      rewrite: "/api/logs/"
      timeout_ms: 300000
      service: "argo-ui.kubeflow:80"
      use_websocket: true
  labels:
    ksonnet.io/component: service
  name: kf-argo-ui-mapping-service
  namespace: dkube
spec:
  clusterIP: None
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  "katib"
      timeout_ms: 600000
      use_websocket: true
      prefix: "/katib"
      rewrite: "/katib"
      service: "katib-ui.kubeflow:80"
  labels:
    ksonnet.io/component: service
  name: kf-katib-mapping-service
  namespace: dkube
spec:
  clusterIP: None
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: pipelineui-mapping
      prefix: /pipeline
      rewrite: /pipeline
      timeout_ms: 300000
      service: ml-pipeline-ui.kubeflow
      use_websocket: true
  labels:
    app: ml-pipeline-ui
    ksonnet.io/component: service
  name: kf-pipeline-ui-mapping-service
  namespace: dkube
spec:
  clusterIP: None
  type: ClusterIP
